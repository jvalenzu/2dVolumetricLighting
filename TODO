[x] setup header dependencies
[x] setup a render texture target
[x] use GLSL to do an image effect
[x] 2d raymarching
[x] 1d raymarching
[x] Material properties: initialize once with name and type, set via index, test type
[x] SceneObjectDestroy should remove any group association
[x] Textures into SimpleAssetManager
[x] SDF lighting
[x] sprite pivot points
[x] multiple light support
   The actual light data is straight-forward - separate arrays for point, directional, spotlight.  The interface for getting them up seems to be
   1) generate a uniform buffer object.  We would have one per light type.
   2) use glBindBuffer and glMapBuffer/glUnmapBuffer to copy the data once per frame.
   3) glGetUniformBlockIndex and glBindBufferBase to bind the UBO to a particular buffer location in the shader
   
   The structure of the runtime code deserves some thought.  Currently scene objects only comprise one scene object type.  If we want sprites to also be lights, we either need a spritelight type, we need each scene object to optionally also be a light, we need some componenty thing (ugh), or a way to attach scene objects (ugh).
[x] Light types
  [x] Point
  [x] Conical
  [x] Cylindrical (distance from line)
  Cylindrical light parameterization is kind of a mess.  m_Direction?  In screenspace?  But not really?
[x] Attenuation
  [x] Point
  [x] Conical
  [x] Cylindrical (distance from line)
[x] sprite scale
[x] sprite tint
[✓] shadows from multiple lights
  [x] Point
  [x] Conical
  Simplest way for non-point lights would be to do attentuation in the 1d phase.
  [x] 1st: multipass
  [ ] 2nd: texture array?
[✓] light prepass optimization
  [ ] Light prepass doesn't match falloff exactly, leading to sharp edge.
[ ] directional light
[x] Add member function for MaterialReserveMaterialProperties
[x] Add member function for MaterialSetMaterialPropertyType
[x] Add member function for MaterialSetMaterialPropertyVector
[x] Add member function for MaterialSetMaterialPropertyFloat
[x] Add member function for MaterialSetMaterialPropertyTexture
[ ] ARTIFACT: The volumetric shadow has lines in it
[ ] ARTIFACT: Dealing with lsp embedded in occluder
[✓] Windows port
  [x] OpenGL
  [ ] DirectX 11 or 12.
[✓] shader preprocessing
  [ ] Deal with different configurations (DEBUG, RELEASE, OSX, ETC)
  [ ] shader variations
  [ ] suppress MCPP warning from unrecognized #extension directive
[x] ARTIFACT: Dealing with nearly offscreen LSP -> radial test artifacts
[ ] Relocate asset file paths
[ ] SceneObject reference count
[ ] sprite asset
[ ] Material assets
  [ ] Include normal data for SDF
[x] ambient parameterization
[ ] imgui layer to describe keys, toggle options like disabling lights and changing resolution
[x] Query the default resolution to create an appropriately sized window.
[ ] Black screen after resize
[ ] Remove Obb?  There's probably too many cached local to world matrices about
[ ] Do we need a separate Model Po matrix?  Seems like overkill given the size and purpose of the demo.
[ ] Aspect ratio is incorrect
[ ] Better method of finding eigenvectors in Obb tool
[ ] Less fond of RMath design over time, remove it for Obb generation

------------------------------------------------
PUBLISH
------------------------------------------------

[ ] UI describing keys
[ ] Add member function for vec3 for destructive operations
[ ] movement less jerky
[ ] memory leaks
[ ] shader reloading
[ ] use explicit layout in shaders to avoid string based coupling
[ ] Move model matrix param setting into model, out of material
[ ] Set view/projection param once per frame (or once per camera)
[ ] global shader parameters
[ ] realtime SDF (CL)
[ ] move camera out of RenderContext and into Scene
[ ] move SceneObject instances over to HandleAssetManager
[ ] shader fallback when a shader can't be compiled or found
[ ] Parameterized shadow blend factor
[ ] Reverse index hashes in ShaderManager to allow sorting on separate indices
[ ] GNU/Linux port
[ ] Makefile dependency if you delete a source file (just hangs currently)
[ ] GUIDs instead of asset paths
[ ] Split one-time initialization like ShaderInit out of RenderInit which because it takes a render context implies it's not a singleton.  Alternatively make RenderContext a singleton.
[ ] Make gamma correct
[ ] Bilinear filter Gaussian blur
[ ] Shader assets
  [ ] Decouple vsh/fsh
[ ] Shader variants
  [ ] Back to one SampleShadowMap shader
[ ] Hundreds of sprites
[ ] FIXME:
  [ ] // duplication in ToolGenerateObbFromVec3 (Tools/Utils.cpp)
[ ] Need to spell out how the FromZeroOne functions result in non-cartesean reactions in the 1d mapping functions
