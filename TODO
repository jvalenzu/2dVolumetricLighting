[x] setup header dependencies
[x] setup a render texture target
[x] use GLSL to do an image effect
[x] 2d raymarching
[x] 1d raymarching
[x] Material properties: initialize once with name and type, set via index, test type
[x] SceneObjectDestroy should remove any group association
[x] Textures into SimpleAssetManager
[x] SDF lighting
[x] sprite pivot points
[ ] multiple light support
   The actual light data is straight-forward - separate arrays for point, directional, spotlight.  The interface for getting them up seems to be
   1) generate a uniform buffer object.  We would have one per light type.
   2) use glBindBuffer and glMapBuffer/glUnmapBuffer to copy the data once per frame.
   3) glGetUniformBlockIndex and glBindBufferBase to bind the UBO to a particular buffer location in the shader
   
   The structure of the runtime code deserves some thought.  Currently scene objects only comprise one scene object type.  If we want sprites to also be lights, we either need a spritelight type, we need each scene object to optionally also be a light, we need some componenty thing (ugh), or a way to attach scene objects (ugh).
[ ] Attenuation
  [ ] Point
  [ ] Conical
  [ ] Cylindrical (distance from line)
[ ] sprite scale
[ ] sprite asset
[ ] Material assets
  [ ] Include normal data for SDF
[ ] memory leaks
[ ] shader reloading
[x] Add member function for MaterialReserveMaterialProperties
[ ] Add member function for vec3 for destructive operations
[ ] Split one-time initialization like ShaderInit out of RenderInit which because it takes a render context implies it's not a singleton
[ ] ARTIFACT: The volumetric shadow has lines in it
[ ] ARTIFACT: Dealing with lsp embedded in occluder
[ ] TODO: Windows port
[x] shader preprocessing
[x] ARTIFACT: Dealing with nearly offscreen LSP -> radial test artifacts
[ ] Relocate assets

------------------------------------------------
PUBLISH GIT 
------------------------------------------------

[ ] use explicit layout in shaders to avoid string based coupling
[ ] Move model matrix param setting into model, out of material
[ ] Set view/projection param once per frame (or once per camera)
[ ] global shader parameters
[ ] realtime SDF (CL)
[ ] ambient parameterization
[ ] move camera out of RenderContext and into Scene
[ ] move SceneObject instances over to HandleAssetManager
[ ] shader fallback when a shader can't be compiled or found
[ ] Parameterized shadow blend factor
[ ] Reverse index hashes in ShaderManager to allow sorting on separate indices
[ ] GNU/Linux port
[ ] Makefile dependency if you delete a source file (just hangs currently)
[ ] GUIDs instead of asset paths
